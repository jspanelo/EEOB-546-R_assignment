scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
) -> P
htmlwidgets::saveWidget(P, "./plots/Proportions_by_genotype/index.html")
color_plots <- c("#009E73",  "#D55E00", "#999999") # Colorblind-friendly colors for plots
plotly::ggplotly(
geno_long %>% group_by(Sample_ID) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Sample_ID)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
) -> P
htmlwidgets::saveWidget(P, "./plots/Proportions_by_genotype.html")
plotly::ggplotly(
geno_long %>% group_by(Sample_ID) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Sample_ID)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
) -> P
htmlwidgets::saveWidget(P, "./plots/Proportions_by_genotype/index.html")
htmlwidgets::saveWidget(P, "./plots/Proportions_by_genotype.html")
htmlwidgets::saveWidget(P, "plots/Proportions_by_genotype.html")
htmlwidgets::saveWidget(P, "plots/Proportions_by_genotype.html")
htmlwidgets::saveWidget(P, "Proportions_by_genotype.html")
color_plots <- c("#009E73",  "#D55E00", "#999999") # Colorblind-friendly colors for plots
plotly::ggplotly(
geno_long %>% group_by(Sample_ID) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Sample_ID)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
) -> P
setwd('./plots')
htmlwidgets::saveWidget(P, "./plots/Proportions_by_genotype.html")
color_plots <- c("#009E73",  "#D55E00", "#999999") # Colorblind-friendly colors for plots
plotly::ggplotly(
geno_long %>% group_by(Sample_ID) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Sample_ID)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
) -> P
setwd('./plots')
htmlwidgets::saveWidget(P, "Proportions_by_genotype.html")
setwd('../')
color_plots <- c("#009E73",  "#D55E00", "#999999") # Colorblind-friendly colors for plots
plotly::ggplotly(
geno_long %>% group_by(Sample_ID) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Sample_ID)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') #+
#theme(axis.title.x=element_blank(),
#     axis.text.x=element_blank(),
#    axis.ticks.x=element_blank())
)
plotly::ggplotly(
geno_long %>% group_by(Sample_ID) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Sample_ID)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') #+
#theme(axis.title.x=element_blank(),
#     axis.text.x=element_blank(),
#    axis.ticks.x=element_blank())
)
color_plots <- c("#009E73",  "#D55E00", "#999999") # Colorblind-friendly colors for plots
plotly::ggplotly(
geno_long %>% group_by(Sample_ID) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Sample_ID)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') #+
theme(axis.text.x = element_text(angle = 90))
#theme(axis.title.x=element_blank(),
#     axis.text.x=element_blank(),
#    axis.ticks.x=element_blank())
)
color_plots <- c("#009E73",  "#D55E00", "#999999") # Colorblind-friendly colors for plots
plotly::ggplotly(
geno_long %>% group_by(Sample_ID) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Sample_ID)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') +
theme(axis.text.x = element_text(angle = 90))
#theme(axis.title.x=element_blank(),
#     axis.text.x=element_blank(),
#    axis.ticks.x=element_blank())
)
groups_long <-
genotypes %>% select(-JG_OTU, -Sample_ID) %>%
pivot_longer(!Group) %>%
mutate(Locus = ifelse(value %in% c('C/C', 'G/G', 'A/A', 'T/T'), 'Homozygote', ifelse(value == '?/?', 'MD', 'Heterozygote')))
groups_long %>% group_by(Group) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Group)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes and Missing Data by Group ") +
ylab('Proportion')
groups_long %>% group_by(Group) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Group)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes and Missing Data by Group ") +
ylab('Proportion') +
theme(axis.text.x = element_text(angle = 90))
groups_long %>% group_by(Group) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Group)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes and Missing Data /nby Group ") +
ylab('Proportion') +
theme(axis.text.x = element_text(angle = 90))
groups_long %>% group_by(Group) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Group)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes and Missing Data \nby Group ") +
ylab('Proportion') +
theme(axis.text.x = element_text(angle = 90))
ggsave('./plots/Proportions_by_group.jpg')
ggsave('./plots/Proportions_by_group.pdf')
color_plots <- c("#009E73", "#999999","#D55E00", "#545454")
groups_long %>% filter(Locus == "Homozygote") %>% group_by(Group) %>%  count(value) %>%
ggplot(aes(fill = value, y = n, x = Group)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of nucleotides for Homozygotic sites in each group") +
ylab('Proportion') +
theme_bw()
color_plots <- c("#009E73", "#999999","#D55E00", "#545454")
groups_long %>% filter(Locus == "Homozygote") %>% group_by(Group) %>%  count(value) %>%
ggplot(aes(fill = value, y = n, x = Group)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of nucleotides for Homozygotic sites in each group") +
ylab('Proportion') +
theme(axis.text.x = element_text(angle = 90))
ggsave('./plots/own_plot.pdf')
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages("plotly")
#Built in functions
source("functions_R_assignment.R")
# loop for going through the snp and genotype files for getting basic info. Those are the only txt files in the wd
for( i in list.files(pattern = '*.txt')){   # match all text files to iterate through them
# The output of this loop is some information as a string, easy to read.
print(paste0('The file ', i,          # print() statement for getting an output after the loop; paste0() to built the string
# read.table() to read the appropriate file in each step of the loop
# nrow() and ncol() for counting rows and columns respectively in each step of the loop
'  is ', nrow(read.table(i, sep = '\t')), ' rows long and ',
install.packages("plotly")
ncol(read.table(i, sep = '\t')), ' columns wide.'))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#install.packages("plotly")
#Built in functions
source("functions_R_assignment.R")
# loop for going through the snp and genotype files for getting basic info. Those are the only txt files in the wd
for( i in list.files(pattern = '*.txt')){   # match all text files to iterate through them
# The output of this loop is some information as a string, easy to read.
print(paste0('The file ', i,          # print() statement for getting an output after the loop; paste0() to built the string
# read.table() to read the appropriate file in each step of the loop
# nrow() and ncol() for counting rows and columns respectively in each step of the loop
'  is ', nrow(read.table(i, sep = '\t')), ' rows long and ',
ncol(read.table(i, sep = '\t')), ' columns wide.'))
}
snp_pos <- read_delim("snp_position.txt", delim = '\t')
head(snp_pos)
snp_pos %>% filter(Position < 10e1000) %>%
group_by(Chromosome = as.numeric(Chromosome)) %>%
summarise(SNPs = n(),
First_Pos_Mb = (min(as.double(Position)/1000000)),
Last_Pos_Mb = (max(as.double(Position)/1000000)),
Coverage_Mb = Last_Pos_Mb - First_Pos_Mb)
str(snp_pos)
Info <- NULL
for (i in 1:ncol(snp_pos)) {
rbind(Info, c(names(snp_pos)[i],
length(levels(as.factor(snp_pos[[i]]))))) -> Info
Info %>% as.table()
}
as_tibble(Info) %>% rename(., Feature = "V1", `Counts or Levels` = "V2")
as.data.frame(table(SNP_pso$Chromosome, deparse.level = 2),
responseName = 'Counts')
as.data.frame(table(SNP_pos$Chromosome, deparse.level = 2),
responseName = 'Counts')
snp_pos <- read_delim("snp_position.txt", delim = '\t')
as.data.frame(table(SNP_pos$Chromosome, deparse.level = 2),
responseName = 'Counts')
as.data.frame(table(snp_pos$Chromosome, deparse.level = 2),
responseName = 'Counts')
genotypes <- read_delim("fang_et_al_genotypes.txt", delim = '\t')
summary(genotypes)
genotypes <- read_delim("fang_et_al_genotypes.txt", delim = '\t')
Info_G <- NULL
for (i in 1:ncol(genotypes)) {
rbind(Info_G, c(names(genotypes)[i],
length(levels(as.factor(genotypes[[i]]))))) -> Info_G
Info_G %>% as.table()
}
as_tibble(Info_G) %>% rename(., Feature = "V1", Counts = "V2")
# Summarizyng the data based on the number of counts of each feature
as_tibble(Info_G) %>% rename(., Feature = "V1", Counts = "V2") %>% group_by(Counts) %>% summarise(n = n())
as_tibble(cbind(c('Teosinte','Maize'), rbind(dim(genotypes[genotypes$Group %in% c('ZMPBA','ZMPIL','ZMPJA'),]),
dim(genotypes[genotypes$Group %in% c('ZMMIL','ZMMLR','ZMMMR'),])))) %>%
rename(Species = 'V1', Samples = "V2", SNPs = "V3")
dir.create('./output')
dir.create('./plots')
genotypes %>%
filter(Group %in% c('ZMPBA','ZMPIL','ZMPJA')) %>%
select(-c(2:3)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column() %>%
as_tibble() -> teosinte
names(teosinte) <- teosinte[1,]
teosinte <- teosinte[-1,]
teosinte <- rename(teosinte, SNP_ID = "Sample_ID")
genotypes %>%
filter(Group %in% c('ZMMIL','ZMMLR','ZMMMR')) %>%
select(-c(2:3)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column() %>%
as_tibble() -> maize
names(maize) <- maize[1,]
maize <- maize[-1,]
maize <- rename(maize, SNP_ID = "Sample_ID")
left_join(teosinte, select(snp_pos, c('SNP_ID', 'Chromosome', 'Position')), by = "SNP_ID") %>%
select(c('SNP_ID', 'Chromosome', 'Position'), everything()) %>%
filter(Chromosome %in% c(1:10) & Position < 10e1000) %>% droplevels() -> teosinte
left_join(maize, select(snp_pos, c('SNP_ID', 'Chromosome', 'Position')), by = "SNP_ID") %>%
select(c('SNP_ID', 'Chromosome', 'Position'), everything()) %>%
filter(Chromosome %in% c(1:10) & Position < 10e1000) %>% droplevels() -> maize
for (i in 1:10) {
write_chrom(maize, i, 'maize')
write_chrom(teosinte, i, 'teo')
write_chrom_reverse(maize, i, 'maize')
write_chrom_reverse(teosinte, i, 'teo')
}
snp_pos %>%
filter(Position < 10e1000) %>%
ggplot(aes(as.double(Chromosome))) +
geom_bar(fill = 'orange', color = 'darkred') +
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.3) +
scale_x_continuous(breaks = 1:10) +
theme_replace() +
ggtitle("SNPs count by Chromosome") +
ylab('Number of SNPs') +
xlab('Chromosome')
ggsave('./plots/SNPs_count.pdf')
snp_pos %>% filter(Position < 10e1000) %>%
ggplot(aes(as.double(Position)/1000000)) +
geom_histogram(aes(y = ..density..), color = 'orange', fill = "orange", alpha = 0.4, bins = 20) +
geom_density(aes(as.double(Position)/1000000), color = "darkred") +
facet_wrap(~ as.double(Chromosome), scales = "free_x") +
theme_replace() +
ggtitle("SNPs distribution by Chromosome") +
xlab('Genome position (Mb)') +
ylab('SNP density')
ggsave(paste0("./plots/SNP_distribution_by_chrom.pdf"))
geno_long <-
genotypes %>% select(-JG_OTU, -Group) %>%
pivot_longer(!Sample_ID) %>%
mutate(Locus = ifelse(value %in% c('C/C', 'G/G', 'A/A', 'T/T'), 'Homozygote', ifelse(value == '?/?', 'MD', 'Heterozygote')))
color_plots <- c("#009E73",  "#D55E00", "#999999") # Colorblind-friendly colors for plots
plotly::ggplotly(
geno_long %>% group_by(Sample_ID) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Sample_ID)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
) -> P
setwd('./plots')
htmlwidgets::saveWidget(P, "Proportions_by_genotype.html")
setwd('../')
groups_long <-
genotypes %>% select(-JG_OTU, -Sample_ID) %>%
pivot_longer(!Group) %>%
mutate(Locus = ifelse(value %in% c('C/C', 'G/G', 'A/A', 'T/T'), 'Homozygote', ifelse(value == '?/?', 'MD', 'Heterozygote')))
groups_long %>% group_by(Group) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Group)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes and Missing Data \nby Group ") +
ylab('Proportion') +
theme(axis.text.x = element_text(angle = 90))
ggsave('./plots/Proportions_by_group.pdf')
color_plots <- c("#009E73", "#999999","#D55E00", "#545454")
groups_long %>% filter(Locus == "Homozygote") %>% group_by(Group) %>%  count(value) %>%
ggplot(aes(fill = value, y = n, x = Group)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of nucleotides for Homozygotic sites in each group") +
ylab('Proportion') +
theme(axis.text.x = element_text(angle = 90))
ggsave('./plots/own_plot.pdf')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#install.packages("plotly")
#Built in functions
source("functions_R_assignment.R")
# loop for going through the snp and genotype files for getting basic info. Those are the only txt files in the wd
for( i in list.files(pattern = '*.txt')){   # match all text files to iterate through them
# The output of this loop is some information as a string, easy to read.
print(paste0('The file ', i,          # print() statement for getting an output after the loop; paste0() to built the string
# read.table() to read the appropriate file in each step of the loop
# nrow() and ncol() for counting rows and columns respectively in each step of the loop
'  is ', nrow(read.table(i, sep = '\t')), ' rows long and ',
ncol(read.table(i, sep = '\t')), ' columns wide.'))
}
snp_pos <- read_delim("snp_position.txt", delim = '\t')
head(snp_pos)
snp_pos %>% filter(Position < 10e1000) %>%
group_by(Chromosome = as.numeric(Chromosome)) %>%
summarise(SNPs = n(),
First_Pos_Mb = (min(as.double(Position)/1000000)),
Last_Pos_Mb = (max(as.double(Position)/1000000)),
Coverage_Mb = Last_Pos_Mb - First_Pos_Mb)
str(snp_pos)
Info <- NULL
for (i in 1:ncol(snp_pos)) {
rbind(Info, c(names(snp_pos)[i],
length(levels(as.factor(snp_pos[[i]]))))) -> Info
Info %>% as.table()
}
as_tibble(Info) %>% rename(., Feature = "V1", `Counts or Levels` = "V2")
as.data.frame(table(snp_pos$Chromosome, deparse.level = 2),
responseName = 'Counts')
genotypes <- read_delim("fang_et_al_genotypes.txt", delim = '\t')
Info_G <- NULL
for (i in 1:ncol(genotypes)) {
rbind(Info_G, c(names(genotypes)[i],
length(levels(as.factor(genotypes[[i]]))))) -> Info_G
Info_G %>% as.table()
}
as_tibble(Info_G) %>% rename(., Feature = "V1", Counts = "V2")
# Summarizyng the data based on the number of counts of each feature
as_tibble(Info_G) %>% rename(., Feature = "V1", Counts = "V2") %>% group_by(Counts) %>% summarise(n = n())
rm(list =  ls())
library(tidyverse)
#install.packages("plotly")
#Built in functions
source("functions_R_assignment.R")
# loop for going through the snp and genotype files for getting basic info. Those are the only txt files in the wd
for( i in list.files(pattern = '*.txt')){   # match all text files to iterate through them
# The output of this loop is some information as a string, easy to read.
print(paste0('The file ', i,          # print() statement for getting an output after the loop; paste0() to built the string
# read.table() to read the appropriate file in each step of the loop
# nrow() and ncol() for counting rows and columns respectively in each step of the loop
'  is ', nrow(read.table(i, sep = '\t')), ' rows long and ',
ncol(read.table(i, sep = '\t')), ' columns wide.'))
}
snp_pos <- read_delim("snp_position.txt", delim = '\t')
head(snp_pos)
snp_pos %>% filter(Position < 10e1000) %>%
group_by(Chromosome = as.numeric(Chromosome)) %>%
summarise(SNPs = n(),
First_Pos_Mb = (min(as.double(Position)/1000000)),
Last_Pos_Mb = (max(as.double(Position)/1000000)),
Coverage_Mb = Last_Pos_Mb - First_Pos_Mb)
str(snp_pos)
Info <- NULL
for (i in 1:ncol(snp_pos)) {
rbind(Info, c(names(snp_pos)[i],
length(levels(as.factor(snp_pos[[i]]))))) -> Info
Info %>% as.table()
}
as_tibble(Info) %>% rename(., Feature = "V1", `Counts or Levels` = "V2")
as.data.frame(table(snp_pos$Chromosome, deparse.level = 2),
responseName = 'Counts')
genotypes <- read_delim("fang_et_al_genotypes.txt", delim = '\t')
Info_G <- NULL
for (i in 1:ncol(genotypes)) {
rbind(Info_G, c(names(genotypes)[i],
length(levels(as.factor(genotypes[[i]]))))) -> Info_G
Info_G %>% as.table()
}
as_tibble(Info_G) %>% rename(., Feature = "V1", Counts = "V2")
# Summarizyng the data based on the number of counts of each feature
as_tibble(Info_G) %>% rename(., Feature = "V1", Counts = "V2") %>% group_by(Counts) %>% summarise(n = n())
as_tibble(cbind(c('Teosinte','Maize'), rbind(dim(genotypes[genotypes$Group %in% c('ZMPBA','ZMPIL','ZMPJA'),]),
dim(genotypes[genotypes$Group %in% c('ZMMIL','ZMMLR','ZMMMR'),])))) %>%
rename(Species = 'V1', Samples = "V2", SNPs = "V3")
dir.create('./output')
dir.create('./plots')
genotypes %>%
filter(Group %in% c('ZMPBA','ZMPIL','ZMPJA')) %>%
select(-c(2:3)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column() %>%
as_tibble() -> teosinte
names(teosinte) <- teosinte[1,]
teosinte <- teosinte[-1,]
teosinte <- rename(teosinte, SNP_ID = "Sample_ID")
genotypes %>%
filter(Group %in% c('ZMMIL','ZMMLR','ZMMMR')) %>%
select(-c(2:3)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column() %>%
as_tibble() -> maize
names(maize) <- maize[1,]
maize <- maize[-1,]
maize <- rename(maize, SNP_ID = "Sample_ID")
left_join(teosinte, select(snp_pos, c('SNP_ID', 'Chromosome', 'Position')), by = "SNP_ID") %>%
select(c('SNP_ID', 'Chromosome', 'Position'), everything()) %>%
filter(Chromosome %in% c(1:10) & Position < 10e1000) %>% droplevels() -> teosinte
left_join(maize, select(snp_pos, c('SNP_ID', 'Chromosome', 'Position')), by = "SNP_ID") %>%
select(c('SNP_ID', 'Chromosome', 'Position'), everything()) %>%
filter(Chromosome %in% c(1:10) & Position < 10e1000) %>% droplevels() -> maize
for (i in 1:10) {
write_chrom(maize, i, 'maize')
write_chrom(teosinte, i, 'teo')
write_chrom_reverse(maize, i, 'maize')
write_chrom_reverse(teosinte, i, 'teo')
}
snp_pos %>%
filter(Position < 10e1000) %>%
ggplot(aes(as.double(Chromosome))) +
geom_bar(fill = 'orange', color = 'darkred') +
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.3) +
scale_x_continuous(breaks = 1:10) +
theme_replace() +
ggtitle("SNPs count by Chromosome") +
ylab('Number of SNPs') +
xlab('Chromosome')
ggsave('./plots/SNPs_count.pdf')
snp_pos %>% filter(Position < 10e1000) %>%
ggplot(aes(as.double(Position)/1000000)) +
geom_histogram(aes(y = ..density..), color = 'orange', fill = "orange", alpha = 0.4, bins = 20) +
geom_density(aes(as.double(Position)/1000000), color = "darkred") +
facet_wrap(~ as.double(Chromosome), scales = "free_x") +
theme_replace() +
ggtitle("SNPs distribution by Chromosome") +
xlab('Genome position (Mb)') +
ylab('SNP density')
ggsave(paste0("./plots/SNP_distribution_by_chrom.pdf"))
geno_long <-
genotypes %>% select(-JG_OTU, -Group) %>%
pivot_longer(!Sample_ID) %>%
mutate(Locus = ifelse(value %in% c('C/C', 'G/G', 'A/A', 'T/T'), 'Homozygote', ifelse(value == '?/?', 'MD', 'Heterozygote')))
color_plots <- c("#009E73",  "#D55E00", "#999999") # Colorblind-friendly colors for plots
plotly::ggplotly(
geno_long %>% group_by(Sample_ID) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Sample_ID)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes \nand Missing Data by Genotype ") +
ylab('Proportion') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
) -> P
setwd('./plots')
htmlwidgets::saveWidget(P, "Proportions_by_genotype.html")
setwd('../')
groups_long <-
genotypes %>% select(-JG_OTU, -Sample_ID) %>%
pivot_longer(!Group) %>%
mutate(Locus = ifelse(value %in% c('C/C', 'G/G', 'A/A', 'T/T'), 'Homozygote', ifelse(value == '?/?', 'MD', 'Heterozygote')))
groups_long %>% group_by(Group) %>%  count(Locus) %>%
ggplot(aes(fill = Locus, y = n, x = Group)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of Homozygotes, Heterozygotes and Missing Data \nby Group ") +
ylab('Proportion') +
theme(axis.text.x = element_text(angle = 90))
ggsave('./plots/Proportions_by_group.pdf')
color_plots <- c("#009E73", "#999999","#D55E00", "#545454")
groups_long %>% filter(Locus == "Homozygote") %>% group_by(Group) %>%  count(value) %>%
ggplot(aes(fill = value, y = n, x = Group)) +
geom_bar(position = "fill", stat = "identity") +
scale_fill_manual(values = color_plots) +
ggtitle("Proportion of nucleotides for Homozygotic sites in each group") +
ylab('Proportion') +
theme(axis.text.x = element_text(angle = 90))
ggsave('./plots/own_plot.pdf')
install.packages("plotly")
